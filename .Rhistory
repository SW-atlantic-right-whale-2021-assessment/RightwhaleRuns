" K = ", round(sample.K),
" Pred_N.target = ", round(Pred_N$Pred_N[bisection.Yrs]),
" q.IAs = ", round(q.sample.IA1,4),
" q.Count = ", round(q.sample.Count,4))
}
#Compute the likelihoods
#--------------------------------
# (1) relative indices (if rel.abundance.key is TRUE)
if (rel.abundance.key & !q.error) {
lnlike.IAs <- LNLIKE.MVLNORM.IAs(rel.abundance,
rel.var.covar.wide,
Pred_N$Pred_N,
start_yr,
q.sample.IA1,
q.sample.IA2,
sample.add_VAR_IA,
TRUE)
} else {
lnlike.IAs <- rep(0, nrow(rel.abundance))
}
# (2) count data (if count.data.key is TRUE)
if (count.data.key) {
lnlike.Count <- LNLIKE.IAs(count.data,
Pred_N$Pred_N,
start_yr,
q.sample.Count,
sample.add_CV,
log=TRUE)
} else {
lnlike.Count <- rep(0, nrow(count.data))
}
# (3) absolute abundance
if (abs.abundance.key) {
lnlike.Ns <- LNLIKE.Ns(abs.abundance,
Pred_N$Pred_N,
start_yr,
sample.add_CV,
log=TRUE)
} else {
lnlike.Ns <- rep(0, nrow(abs.abundance))
}
# (4) growth rate if applicable
if (growth.rate.obs[3]) {
Pred.GR <- PRED.GROWTH.RATE(growth.rate.Yrs=growth.rate.Yrs,
Pred_N=Pred_N$Pred_N,
start_yr=start_yr)
lnlike.GR <- LNLIKE.GR(Obs.GR=growth.rate.obs[1],
Pred.GR=Pred.GR,
GR.SD.Obs=growth.rate.obs[2])
} else {
lnlike.GR <- 0
}
if (control$verbose > 2) {
message("lnlike.IAs = ", round(lnlike.IAs,3),
" lnlike.Count = ", round(lnlike.Count,3),
" lnlike.Ns = ", round(lnlike.Ns,3),
" lnlike.GR = ", round(lnlike.GR,3))
}
## These use the likelihoods in Zerbini et al. (2011)
NLL <- -sum(c(lnlike.IAs, lnlike.Count, lnlike.Ns, lnlike.GR))
Likelihood <- exp(-NLL)
if (control$verbose > 1) {
message("NLL = ", NLL,
" Likelihood = ", Likelihood)
}
## If population fell below minimum viable population size, set likelihood to 0
if (Pred_N$Violate_Min_Viable_Pop) {
Likelihood <- 0
if (control$verbose > 0) {
message("MVP violated on draw", draw)
}
}
## If population was too variable because of process error, set likelihood to 0
if (K.error) {
Likelihood <- 0
if (control$verbose > 0) {
message("Population dynamics too variable on draw", draw)
}
}
## If q <= 0
if (q.error) {
Likelihood <- 0
if (control$verbose > 0) {
message("Q less than 0 on draw", draw)
}
}
## Accumulate likelihood
Cumulative.Likelihood <- Cumulative.Likelihood + Likelihood
## Trick to just extract realized prior
if(realized_prior & !q.error & !K.error & !Pred_N$Violate_Min_Viable_Pop){
Cumulative.Likelihood <- 2 * control$threshold
}
## Save draws if cumulative like is above threshold
while (Cumulative.Likelihood > control$threshold & i < n_resamples) {
if (control$verbose > 0) {
message("sample = ", i, " draw = ", draw)
}
if (control$verbose > 1) {
message("draw = ", draw,
" Likelihood = ", Likelihood,
" Cumulative = ", Cumulative.Likelihood)
}
save <- TRUE
Cumulative.Likelihood <- Cumulative.Likelihood-control$threshold
resamples_trajectories[i+1,] <- Pred_N$Pred_N
catch_trajectories[i+1,] <- catches
proc_error_save[i+1,] <- sample.proc.error
resamples_output[i+1,] <- c(sample.r_max,
sample.K,
sample.var_N,
sample.z,
sample.Pmsy,
sample.P50,
sample.catch_multipliers,
sample.catch_parameter,
sample.N.obs,
sample.add_CV,
sample.add_VAR_IA,
Pred_N$Min_Pop,
ifelse(length(Pred_N$Min_Yr) == 1, Pred_N$Min_Yr, "Multiple"),
Pred_N$Violate_Min_Viable_Pop,
c(Pred_N$Pred_N[target.Yr - start_yr + 1]),
c(Pred_N$Pred_N[output.Yrs - start_yr + 1]),
Pred.ROI.IA,
q.sample.IA1,
q.sample.IA2,
Pred.ROI.Count,
q.sample.Count,
lnlike.IAs,
lnlike.Count,
lnlike.Ns,
lnlike.GR,
NLL,
Likelihood,
Pred_N$Min_Pop / sample.K,
c(Pred_N$Pred_N[target.Yr - start_yr + 1] /
sample.K),
c(Pred_N$Pred_N[output.Yrs - start_yr + 1] /
sample.K),
draw,
save)
i <- i+1
if (control$progress_bar) {
setTxtProgressBar(pb, i)
}
}
draw <- draw+1
}
# Save outputs
resamples_output <- data.frame(resamples_output)
resamples_output[] <- lapply(resamples_output, function(x) as.numeric(as.character(x)))
names(resamples_output) <- sir_names
if(!is.null(file_name)){
write.csv(resamples_output,
paste0(file_name, "_", "resamples_output.csv"))
}
resamples_trajectories <- data.frame(resamples_trajectories)
resamples_trajectories[] <- lapply(resamples_trajectories, function(x) as.numeric(as.character(x)))
names(resamples_trajectories) <- paste0("N_", Year)
if(!is.null(file_name)){
write.csv(resamples_trajectories,
paste0(file_name, "_", "resamples_trajectories.csv"))
}
catch_trajectories <- data.frame(catch_trajectories)
catch_trajectories[] <- lapply(catch_trajectories, function(x) as.numeric(as.character(x)))
names(catch_trajectories) <- paste0("Catch_", Year)
if(!is.null(file_name)){
write.csv(catch_trajectories,
paste0(file_name, "_", "catch_trajectories.csv"))
}
proc_error_save <- data.frame(proc_error_save)
proc_error_save[] <- lapply(proc_error_save, function(x) as.numeric(as.character(x)))
names(proc_error_save) <- paste0("Proc_error_", Year[1:(projection.Yrs-1)])
if(!is.null(file_name)){
write.csv(proc_error_save,
paste0(file_name, "_", "proc_error.csv"))
}
resamples.per.samples <- draw / n_resamples
if(resamples.per.samples < 3){
warning("Number of resamples per sample is ",
round(resamples.per.samples, 1),
", use higher threshold value.")
} else if (resamples.per.samples > 20) {
warning("Number of resamples per sample is ",
round(resamples.per.samples, 1),
", use lower threshold value.")
}
end.time <- Sys.time()
if (control$verbose > 0) {
message("Time to Compute = ", (end.time-begin.time))
}
return_list <- list(call = call,
file_name = file_name,
Date.Time = Sys.time(),
Time.to.compute.in.minutes = paste((end.time-begin.time) / 60),
threshold = control$threshold,
Ratio.Resamples.per.Sample = paste("1 resample",
":",
resamples.per.samples,
"samples"),
resamples_output = resamples_output,
resamples_trajectories = resamples_trajectories,
catch_trajectories = catch_trajectories,
inputs = list(allee_model = allee_model,
draws = draw,
n_resamples = n_resamples,
prior_r_max = priors$r_max,
catch_multipliers = catch_multipliers,
priors_N_obs = priors$N_obs,
target.Yr = target.Yr,
start_yr = start_yr,
MVP = paste("num.haplotypes = ",
num.haplotypes,
"MVP = ",
3 * num.haplotypes),
tolerance = control$K_bisect_tol,
output.Years = output.Yrs,
abs.abundance = abs.abundance,
count.data = count.data,
catch.data = catch.data,
realized_prior = realized_prior))
if(rel.abundance.key){ return_list$inputs$rel.abundance = rel.abundance}
class(return_list) <- "SIR" # Defines class for object
return(return_list)
}
sir_base[[i]] <-  StateSpaceSIR(
file_name = NULL,
n_resamples = 1000,
priors = make_prior_list(r_max =  make_prior(runif, 0, 0.12),
N_obs = make_prior(runif, 100, 20000),
var_N = make_prior(0),
z = make_prior(use = FALSE),
Pmsy = make_prior(0.6)),
catch_multipliers = make_multiplier_list(
make_prior(1)),
target.Yr = 2009,
num.haplotypes = 12,
output.Yrs = c(2021, 2030),
abs.abundance = Abs.Abundance.2009,
abs.abundance.key = TRUE,
rel.abundance = Rel.Abundance.NZRight,
rel.abundance.key = TRUE, # Indices of abundance
count.data = Count.Data, # Not used
count.data.key = FALSE, # Don't use count data
growth.rate.obs = c(0.074, 0.033, FALSE), # Do not include growth rate
growth.rate.Yrs = c(1995, 1996, 1997, 1998), # Not used
catch.data = catch_list,
control = sir_control(threshold = 1e-8, progress_bar = TRUE),
realized_prior = ifelse(i == 1, FALSE, TRUE))
################################################################################
# Base model
################################################################################
file_name <- "NZ model runs/Base/Base"
sir_base <- list()
for(i in 1:2){
sir_base[[i]] <-  StateSpaceSIR(
file_name = NULL,
n_resamples = 1000,
priors = make_prior_list(r_max =  make_prior(runif, 0, 0.12),
N_obs = make_prior(runif, 100, 20000),
var_N = make_prior(0),
z = make_prior(use = FALSE),
Pmsy = make_prior(0.6)),
catch_multipliers = make_multiplier_list(
make_prior(1)),
target.Yr = 2009,
num.haplotypes = 12,
output.Yrs = c(2021, 2030),
abs.abundance = Abs.Abundance.2009,
abs.abundance.key = TRUE,
rel.abundance = Rel.Abundance.NZRight,
rel.abundance.key = TRUE, # Indices of abundance
count.data = Count.Data, # Not used
count.data.key = FALSE, # Don't use count data
growth.rate.obs = c(0.074, 0.033, FALSE), # Do not include growth rate
growth.rate.Yrs = c(1995, 1996, 1997, 1998), # Not used
catch.data = catch_list,
control = sir_control(threshold = 1e-8, progress_bar = TRUE),
realized_prior = ifelse(i == 1, FALSE, TRUE))
}
################################################################################
# Base model
################################################################################
file_name <- "NZ model runs/Base/Base"
sir_base <- list()
for(i in 1:2){
sir_base[[i]] <-  StateSpaceSIR(
file_name = NULL,
n_resamples = 1000,
priors = make_prior_list(r_max =  make_prior(runif, 0, 0.12),
N_obs = make_prior(runif, 100, 20000),
var_N = make_prior(0),
z = make_prior(use = FALSE),
Pmsy = make_prior(0.6)),
catch_multipliers = make_multiplier_list(
make_prior(1)),
target.Yr = 2009,
num.haplotypes = 12,
output.Yrs = c(2021, 2030),
abs.abundance = Abs.Abundance.2009,
abs.abundance.key = TRUE,
rel.abundance = Rel.Abundance.NZRight,
rel.abundance.key = TRUE, # Indices of abundance
count.data = Count.Data, # Not used
count.data.key = FALSE, # Don't use count data
growth.rate.obs = c(0.074, 0.033, FALSE), # Do not include growth rate
growth.rate.Yrs = c(1995, 1996, 1997, 1998), # Not used
catch.data = catch_list,
control = sir_control(threshold = 1e-5, progress_bar = TRUE),
realized_prior = ifelse(i == 1, FALSE, TRUE))
}
################################################################################
# Base model
################################################################################
file_name <- "NZ model runs/Base/Base"
sir_base <- list()
for(i in 1:2){
sir_base[[i]] <-  StateSpaceSIR(
file_name = NULL,
n_resamples = 1000,
priors = make_prior_list(r_max =  make_prior(runif, 0, 0.12),
N_obs = make_prior(runif, 100, 20000),
var_N = make_prior(0),
z = make_prior(use = FALSE),
Pmsy = make_prior(0.6)),
catch_multipliers = make_multiplier_list(
make_prior(1)),
target.Yr = 2009,
num.haplotypes = 12,
output.Yrs = c(2021, 2030),
abs.abundance = Abs.Abundance.2009,
abs.abundance.key = TRUE,
rel.abundance = Rel.Abundance.NZRight,
rel.abundance.key = TRUE, # Indices of abundance
count.data = Count.Data, # Not used
count.data.key = FALSE, # Don't use count data
growth.rate.obs = c(0.074, 0.033, FALSE), # Do not include growth rate
growth.rate.Yrs = c(1995, 1996, 1997, 1998), # Not used
catch.data = catch_list,
control = sir_control(threshold = 1e-2, progress_bar = TRUE),
realized_prior = ifelse(i == 1, FALSE, TRUE))
}
################################################################################
# Base model
################################################################################
file_name <- "NZ model runs/Base/Base"
sir_base <- list()
for(i in 1:2){
sir_base[[i]] <-  StateSpaceSIR(
file_name = NULL,
n_resamples = 1000,
priors = make_prior_list(r_max =  make_prior(runif, 0, 0.12),
N_obs = make_prior(runif, 100, 20000),
var_N = make_prior(0),
z = make_prior(use = FALSE),
Pmsy = make_prior(0.6)),
catch_multipliers = make_multiplier_list(
make_prior(1)),
target.Yr = 2009,
num.haplotypes = 12,
output.Yrs = c(2021, 2030),
abs.abundance = Abs.Abundance.2009,
abs.abundance.key = TRUE,
rel.abundance = Rel.Abundance.NZRight,
rel.abundance.key = TRUE, # Indices of abundance
count.data = Count.Data, # Not used
count.data.key = FALSE, # Don't use count data
growth.rate.obs = c(0.074, 0.033, FALSE), # Do not include growth rate
growth.rate.Yrs = c(1995, 1996, 1997, 1998), # Not used
catch.data = catch_list,
control = sir_control(threshold = 1e-3, progress_bar = TRUE),
realized_prior = ifelse(i == 1, FALSE, TRUE))
}
# R Script for Bayesian Assessment Model of Southern Right Whales- originally designed for humpback whales using the equations in Zerbini et al. (2011) Journal of Cetacean Research and Management 3: 131-144. All citations and use of this script please cite Zerbini et al. 2011 as the source of this code.
## EXAMPLE DATA AND MAIN FUNCTION CALL ############
# Male captures and pecaptures for fitting into the model, as used in Carroll et al. (2013) Ecol Appl 23:1677-1690.
NZmale.captures<-data.frame(Year=c(1995,1996,1997,1998,2006,2007,2008,2009),captures=c(29,21,31,51,53,60,48,76))
male.recaptures=c(0,4,3,2,0,0,0,0,0,0,2,2,0,0,1,0,0,0,0,6,0,1,0,0,0,0,0,0,0,3,2,0,0,0,0,0,0,5,1,2,0,0,0,0,0,0,4,8,0,0,0,0,0,0,0,9)
NZ.malerecaptures<-matrix(male.recaptures,ncol=8,byrow=TRUE)
Year=c(1995,1996,1997,1998,2006,2007,2008,2009)
NZ.malerecaptures<-data.frame(NZ.malerecaptures)
rownames(NZ.malerecaptures)<-Year[-8]
colnames(NZ.malerecaptures)<-Year
# Female captures and pecaptures for fitting into the model, as used in Carroll et al. (2013) Ecol Appl 23:1677-1690.
NZ.femcaptures<-data.frame(Year=c(1995,1996,1997,1998,2006,2007,2008,2009),captures=c(28,20,19,46,50,86,92,103))
fem.recaptures=c(0,0,2,2,0,3,0,2,0,0,1,2,0,1,1,1,0,0,0,0,0,0,1,3,0,0,0,0,2,1,8,3,0,0,0,0,0,5,4,3,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,3)
NZ.femrecaptures<-matrix(fem.recaptures,ncol=8,byrow=TRUE)
NZ.femrecaptures<-data.frame(NZ.femrecaptures)
rownames(NZ.femrecaptures)<-Year[-8]
colnames(NZ.femrecaptures)<-Year
Year
NZ.femrecaptures
64/88
library(StateSpaceSIR)
library(EnvStats)
library(dplyr)
################################################################################
# Read in data
################################################################################
# -- Catch
nz_right_data<-read.csv("Data/Jackson 2016/Catch_inputs.csv")   # "Year","CatchMin","CatchMax","Nt"
nz_right_data <- nz_right_data %>%
mutate(CatchMin = rowSums(across(Shore.NZ.L:Soviet.NZ)),
CatchMax = CatchMin) %>%
select(Year, CatchMin, CatchMax)
# Four periods of SLRs
# - Period 1: 1648-1770: SLR = 1
# - Period 2: 1771-1850: SLR ~ N(1.6, 0.04)
# - Period 3: 1851-1973: SLR ~ N(1.09, 0.04)
# - Period 4: 1974-Present: SLR = 1
catch_list <- list(nz_right_data)
catch_list
################################################################################
# Read in data
################################################################################
# -- Catch
nz_right_data<-read.csv("Data/Jackson 2016/Catch_inputs.csv")   # "Year","CatchMin","CatchMax","Nt"
nz_right_data
heaD(nz_right_data)
head(nz_right_data)
################################################################################
# Read in data
################################################################################
# -- Catch
nz_right_data<-read.csv("Data/Jackson 2016/Catch_inputs.csv")   # "Year","CatchMin","CatchMax","Nt"
# Four periods of SLRs
# - Period 1: 1648-1770: SLR = 1
# - Period 2: 1771-1850: SLR ~ N(1.6, 0.04)
# - Period 3: 1851-1973: SLR ~ N(1.09, 0.04)
# - Period 4: 1974-Present: SLR = 1
catch_list <- list()
for(i in 2:ncol(nz_right_data)){
catch_list[[i-1]] <- data.frame(Year = nz_right_data$Year,CatchMin = nz_right_data[,i], CatchMax = nz_right_data[,i])
name(catch_list[[i-1]]) <- colnames(nz_right_data)[i]
}
names(catch_list[[i-1]]) <- colnames(nz_right_data)[i]
# Four periods of SLRs
# - Period 1: 1648-1770: SLR = 1
# - Period 2: 1771-1850: SLR ~ N(1.6, 0.04)
# - Period 3: 1851-1973: SLR ~ N(1.09, 0.04)
# - Period 4: 1974-Present: SLR = 1
catch_list <- list()
for(i in 2:ncol(nz_right_data)){
catch_list[[i-1]] <- data.frame(Year = nz_right_data$Year,CatchMin = nz_right_data[,i], CatchMax = nz_right_data[,i])
names(catch_list[[i-1]]) <- colnames(nz_right_data)[i]
}
head(nz_right_data)
################################################################################
# Read in data
################################################################################
# -- Catch
sw_right_data<-read.delim("Data/datosModeloBallenasmiles2020Miles1648to2019.csv", sep=";",header=FALSE)
Year <- 1:100
offshore.AmericanEA2 <- round(runif(100, 0, 1000))
offshore.AmericanEA3 <- rep(0, 100)
for (jj in 1:length(Year))
{
if (offshore.AmericanEA2[jj]>0)
{
for (ss in 1:length(smear))
{
offshore.AmericanEA3[(jj+ss)-1]=(offshore.AmericanEA2[jj]*smear[ss])+offshore.AmericanEA3[(jj+ss)-1]
}
}
}
Year <- 1:100
offshore.AmericanEA2 <- round(runif(100, 0, 1000))
offshore.AmericanEA3 <- rep(0, 100)
smear = 6
for (jj in 1:length(Year))
{
if (offshore.AmericanEA2[jj]>0)
{
for (ss in 1:length(smear))
{
offshore.AmericanEA3[(jj+ss)-1]=(offshore.AmericanEA2[jj]*smear[ss])+offshore.AmericanEA3[(jj+ss)-1]
}
}
}
offshore.AmericanEA3
Year <- 1:100
offshore.AmericanEA2 <- round(runif(100, 0, 1000))
offshore.AmericanEA3 <- rep(0, 100)
smear = 6
jj = 1
ss = 1
(jj+ss)
offshore.AmericanEA3[(jj+ss)-1]
offshore.AmericanEA2[jj]
smear[ss]
offshore.AmericanEA3[(jj+ss)-1]
for (ss in 1:length(smear))
{
offshore.AmericanEA3[(jj+ss)-1]=(offshore.AmericanEA2[jj]*smear[ss])+offshore.AmericanEA3[(jj+ss)-1]
}
offshore.AmericanEA3
Year <- 1:100
offshore.AmericanEA2 <- round(runif(100, 0, 1000))
offshore.AmericanEA3 <- rep(0, 100)
smear = 6
for (jj in 1:length(Year))
{
if (offshore.AmericanEA2[jj]>0)
{
for (ss in 1:length(smear))
{
offshore.AmericanEA3[(jj+ss)-1]=(offshore.AmericanEA2[jj]*smear[ss])+offshore.AmericanEA3[(jj+ss)-1]
}
}
}
offshore.AmericanEA3
offshore.AmericanEA2
