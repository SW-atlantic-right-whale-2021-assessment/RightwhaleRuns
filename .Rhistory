d = nb.Jul.cuad[19], # Julian day^2 parameter
mu = 60, # mu from manuscript
sigma = 8.66, # sigma from manuscript
x = 320,
ReportList = FALSE) # Calculate until day 320
}
A_xy
A_xy$ln_A_xy_mu_sim <- rowMeans(log(A_xy_mat)) # Expected value of A_xy via numerical simulation.
A_xy$A_xy_mu_sim <- rowMeans((A_xy_mat)) # Expected value of A_xy via numerical simulation.
A_xy$ln_A_xy_var_sim <- rowVars(log(A_xy_mat)) # Variance of A_xy via numerical simulation.
# Build variance covariance
A_xy_vcov <- diag(A_xy$ln_A_xy_var_sim)
for(i in 1:nrow(A_xy_vcov)){
for(j in 1:nrow(A_xy_vcov)){
if(i!=j){
A_xy_vcov[i,j] <- cov(log(A_xy_mat[i,]), log(A_xy_mat[j,]))
}
}
}
A_xy_vcov
A_xy <- cbind(A_xy, A_xy_vcov)
write.csv(A_xy, file = "Data/Accumulated_n_whales_1999_to_2019.csv")
# Data
Obs <- seq(50,150, by = 50)
Pred <- rep(200, 3)
varcov <- matrix(c(0.25,0,0,
0,0.5,0,
0,0,0.2), 3, 3)
hess <- solve(varcov)
# Univariate
qNumerator <- sum(log(Obs/Pred) /
diag(varcov))
qDenominator <- sum(1 / diag(varcov))
exp(qNumerator / qDenominator) # Calculate q
# Multivariate
exp(mean(varcov %*% hess %*% log(Obs/Pred))) # Sum seems off and doesn’t match univariate
varcov %*% hess %*% log(Obs/Pred)
# Multivariate
mean(exp((varcov %*% hess %*% log(Obs/Pred)))) # Sum seems off and doesn’t match univariate
exp(qNumerator / qDenominator) # Calculate q
varcov %*% hess
# Multivariate
exp((hess %*% log(Obs/Pred))) # Sum seems off and doesn’t match univariate
exp(qNumerator / qDenominator) # Calculate q
# Multivariate
mean(exp((hess %*% log(Obs/Pred)))) # Sum seems off and doesn’t match univariate
install.packages('tinytex')
tinytex::install_tinytex()
install.packages("tinytex")
tinytex::install_tinytex()
# -- Relative abundance
sw_right_rel_abundance<-read.csv("Data/Accumulated_n_whales_1999_to_2019.csv")
head(sw_right_rel_abundance)
install.packages("TMB", type = "source")
library(TMB)
runExample(all = TRUE)
install.packages("TMB", type = "source")
library(TMB)
runExample()
runExample("simple")
runExample(all = TRUE)
library(MASS)
q <- 0.5
beta = 2
Nvec <- seq(50, 200, length.out = 4)
varcov <- matrix(c(0.2,0.1,0,0,
0.1,0.2,0.1,0,
0,0.1,0.2,0.1,
0,0,0.1,0.2), 4, 4)
hess <- solve(varcov)
simddata <- exp(mvrnorm(10000, mu = log((Nvec * q)^2) - diag(varcov)/2, Sigma = varcov))
q_est <- (apply(simddata,1, function(x) exp(sum((hess) %*% log(x/Nvec))/(sum(hess)))))
mean(q_est)
q_est <- (apply(simddata,1, function(x) exp(sum((hess) %*% log(x/(Nvec^beta)))/(sum(hess)))))
mean(q_est)
q_est <- (apply(simddata,1, function(x) exp(sum((hess) %*% log((x/Nvec)^beta))/(sum(hess)))))
mean(q_est)
simddata
beta = 1.2
Nvec <- seq(50, 200, length.out = 4)
varcov <- matrix(c(0.2,0.1,0,0,
0.1,0.2,0.1,0,
0,0.1,0.2,0.1,
0,0,0.1,0.2), 4, 4)
hess <- solve(varcov)
simddata <- exp(mvrnorm(10000, mu = log((Nvec * q)^beta) - diag(varcov)/2, Sigma = varcov))
q_est <- (apply(simddata,1, function(x) exp(sum((hess) %*% log(x/Nvec^beta)))/(sum(hess)))))
mean(q_est)
q_est <- (apply(simddata,1, function(x) exp(sum((hess) %*% log(x/(Nvec^beta)))/(sum(hess)))))
mean(q_est)
q_est <- (apply(simddata,1, function(x) exp(sum((hess) %*% log(x/(Nvec^beta)))/(sum(hess)))))
mean(q_est)
library(MASS)
q <- 0.5
beta = 1.2
Nvec <- seq(50, 200, length.out = 4)
varcov <- matrix(c(0.2,0.1,0,0,
0.1,0.2,0.1,0,
0,0.1,0.2,0.1,
0,0,0.1,0.2), 4, 4)
hess <- solve(varcov)
simddata <- exp(mvrnorm(10000, mu = log((Nvec * q)^beta) - diag(varcov)/2, Sigma = varcov))
q_est <- (apply(simddata,1, function(x) exp(sum((hess) %*% log(x/(Nvec^beta)))/(sum(hess)))))
mean(q_est)
library(MASS)
set.seed(666)
q <- 0.5
Nvec <- seq(50, 200, length.out = 4)
varcov <- matrix(c(0.2,0.1,0,0,
0.1,0.2,0.1,0,
0,0.1,0.2,0.1,
0,0,0.1,0.2), 4, 4)
hess <- solve(varcov)
simddata <- exp(mvrnorm(10000, mu = log(Nvec * q) - diag(varcov)/2, Sigma = varcov))
q_est <- (apply(simddata,1, function(x) exp(sum((hess) %*% log(x/Nvec))/(sum(hess)))))
mean(q_est)
library(MASS)
set.seed(666)
q <- 0.5
beta = 1.2
Nvec <- seq(50, 200, length.out = 4)
varcov <- matrix(c(0.2,0.1,0,0,
0.1,0.2,0.1,0,
0,0.1,0.2,0.1,
0,0,0.1,0.2), 4, 4)
hess <- solve(varcov)
simddata <- exp(mvrnorm(10000, mu = log((Nvec * q)^beta) - diag(varcov)/2, Sigma = varcov))
q_est <- (apply(simddata,1, function(x) exp(sum((hess) %*% log(x/(Nvec^beta)))/(sum(hess)))))
mean(q_est)
install.packages("rmarkdown")
install.packages("rmarkdown")
library(MASS)
q <- 0.5; beta = 0.2
Nvec <- seq(50, 200, length.out = 4)
varcov <- matrix(c(0.2,0.1,0,0,
0.1,0.2,0.1,0,
0,0.1,0.2,0.1,
0,0,0.1,0.2), 4, 4)
hess <- solve(varcov)
simddata <- exp(mvrnorm(10000, mu = log(Nvec * q) - diag(varcov)/2, Sigma = varcov))
q_est <- (apply(simddata,1, function(x) exp(sum((hess) %*% log(x/Nvec^(beta+1)))/(sum(hess)))))
mean(q_est)
library(MASS)
q <- 0.5; beta = 0.2
Nvec <- seq(50, 200, length.out = 4)
varcov <- matrix(c(0.2,0.1,0,0,
0.1,0.2,0.1,0,
0,0.1,0.2,0.1,
0,0,0.1,0.2), 4, 4)
hess <- solve(varcov)
simddata <- exp(mvrnorm(10000, mu = log(Nvec * q) - diag(varcov)/2, Sigma = varcov))
q_est <- (apply(simddata,1, function(x) exp(sum((hess) %*% log(x/(Nvec^(beta+1))))/(sum(hess)))))
mean(q_est)
q <- 0.5; beta = -0.2
Nvec <- seq(50, 200, length.out = 4)
varcov <- matrix(c(0.2,0.1,0,0,
0.1,0.2,0.1,0,
0,0.1,0.2,0.1,
0,0,0.1,0.2), 4, 4)
hess <- solve(varcov)
simddata <- exp(mvrnorm(10000, mu = log(Nvec * q) - diag(varcov)/2, Sigma = varcov))
q_est <- (apply(simddata,1, function(x) exp(sum((hess) %*% log(x/(Nvec^(beta+1))))/(sum(hess)))))
mean(q_est)
q <- 0.5; beta = 0
Nvec <- seq(50, 200, length.out = 4)
varcov <- matrix(c(0.2,0.1,0,0,
0.1,0.2,0.1,0,
0,0.1,0.2,0.1,
0,0,0.1,0.2), 4, 4)
hess <- solve(varcov)
simddata <- exp(mvrnorm(10000, mu = log(Nvec * q) - diag(varcov)/2, Sigma = varcov))
q_est <- (apply(simddata,1, function(x) exp(sum((hess) %*% log(x/(Nvec^(beta+1))))/(sum(hess)))))
mean(q_est)
q <- 0.5; beta = 0.01
Nvec <- seq(50, 200, length.out = 4)
varcov <- matrix(c(0.2,0.1,0,0,
0.1,0.2,0.1,0,
0,0.1,0.2,0.1,
0,0,0.1,0.2), 4, 4)
hess <- solve(varcov)
simddata <- exp(mvrnorm(10000, mu = log(Nvec * q) - diag(varcov)/2, Sigma = varcov))
q_est <- (apply(simddata,1, function(x) exp(sum((hess) %*% log(x/(Nvec^(beta+1))))/(sum(hess)))))
mean(q_est)
q <- 0.5; beta = 0.2
Nvec <- seq(50, 200, length.out = 4)
varcov <- matrix(c(0.2,0.1,0,0,
0.1,0.2,0.1,0,
0,0.1,0.2,0.1,
0,0,0.1,0.2), 4, 4)
hess <- solve(varcov)
simddata <- exp(mvrnorm(10000, mu = log(Nvec^(beta+1) * q) - diag(varcov)/2, Sigma = varcov))
q_est <- (apply(simddata,1, function(x) exp(sum((hess) %*% log(x/(Nvec^(beta+1))))/(sum(hess)))))
mean(q_est)
library(StateSpaceSIR)
library(EnvStats)
################################################################################
# Read in data
################################################################################
# -- Catch
sw_right_data<-read.delim("Data/datosModeloBallenasmiles2020Miles1648to2019.csv", sep=";",header=FALSE)
names(sw_right_data)<- c("Year","CatchMin","CatchMax","Nt")
# Four periods of SLRs
# - Period 1: 1648-1770: SLR = 1
# - Period 2: 1771-1850: SLR ~ N(1.6, 0.04)
# - Period 3: 1851-1973: SLR ~ N(1.09, 0.04)
# - Period 4: 1974-Present: SLR = 1
catch_list <- list(sw_right_data[which(sw_right_data$Year < 1771),1:3],
sw_right_data[which(sw_right_data$Year >= 1771 & sw_right_data$Year <= 1850),1:3],
sw_right_data[which(sw_right_data$Year >= 1851 & sw_right_data$Year <= 1973),1:3],
sw_right_data[which(sw_right_data$Year > 1973),1:3])
# -- Absolute abundance
Abs.Abundance.2009 <- data.frame(Year = 2009, N.obs = 4029, CV.obs = NA) # FIXME: not used as of 4/24/21
Abs.Abundance.2010 <- data.frame(Year = 2010, N.obs = 4245, CV.obs = 245/4245) # 2010: 4245 (SE: 245, 95% CI 3,765, 4,725).
# -- Relative abundance
sw_right_rel_abundance<-read.csv("Data/Accumulated_n_whales_1999_to_2019.csv")
Rel.Abundance.SWRight <- data.frame(Index = rep(1, nrow(sw_right_rel_abundance)),
Year = sw_right_rel_abundance$Year,
IA.obs = sw_right_rel_abundance$A_xy_mu_sim) #Using 0.2 as a proxy
Rel.Abundance.SWRight = cbind(Rel.Abundance.SWRight, sw_right_rel_abundance[,paste0("X",1:17)])
for(i in 1:14){
dir.create(paste0("Model runs/Sensitivity_",i))
}
library(StateSpaceSIR)
library(EnvStats)
################################################################################
# Read in data
################################################################################
# -- Catch
sw_right_data<-read.delim("Data/datosModeloBallenasmiles2020Miles1648to2019.csv", sep=";",header=FALSE)
names(sw_right_data)<- c("Year","CatchMin","CatchMax","Nt")
# Four periods of SLRs
# - Period 1: 1648-1770: SLR = 1
# - Period 2: 1771-1850: SLR ~ N(1.6, 0.04)
# - Period 3: 1851-1973: SLR ~ N(1.09, 0.04)
# - Period 4: 1974-Present: SLR = 1
catch_list <- list(sw_right_data[which(sw_right_data$Year < 1771),1:3],
sw_right_data[which(sw_right_data$Year >= 1771 & sw_right_data$Year <= 1850),1:3],
sw_right_data[which(sw_right_data$Year >= 1851 & sw_right_data$Year <= 1973),1:3],
sw_right_data[which(sw_right_data$Year > 1973),1:3])
# -- Absolute abundance
Abs.Abundance.2009 <- data.frame(Year = 2009, N.obs = 4029, CV.obs = NA) # FIXME: not used as of 4/24/21
Abs.Abundance.2010 <- data.frame(Year = 2010, N.obs = 4245, CV.obs = 245/4245) # 2010: 4245 (SE: 245, 95% CI 3,765, 4,725).
# -- Relative abundance
sw_right_rel_abundance<-read.csv("Data/Accumulated_n_whales_1999_to_2019.csv")
Rel.Abundance.SWRight <- data.frame(Index = rep(1, nrow(sw_right_rel_abundance)),
Year = sw_right_rel_abundance$Year,
IA.obs = sw_right_rel_abundance$A_xy_mu_sim) #Using 0.2 as a proxy
Rel.Abundance.SWRight = cbind(Rel.Abundance.SWRight, sw_right_rel_abundance[,paste0("X",1:17)])
################################################################################
# Sensitivity 14 - power equation q
################################################################################
file_name <- "Model runs/sensitivity_14/sensitivity_14"
sensitivity_14 <- list()
for(i in 1:2){
sensitivity_14[[i]] <-  StateSpaceSIR(
file_name = NULL,
n_resamples = 20000,
priors = make_prior_list(r_max =  make_prior(runif, 0, 0.11),
N_obs = make_prior(runif, 100, 10000),
var_N = make_prior(runif, 6.506055e-05, 6.506055e-05 * 10),
z = make_prior(use = FALSE),
q_IA1 = make_prior(rlnorm, log(0.5), 0.2),
q_IA2 = make_prior(rnorm, 0, 0.1),
Pmsy = make_prior(runif, 0.5, 0.8)),
catch_multipliers = make_multiplier_list(
make_prior(1),
make_prior(rnorm, 1.60 , 0.04),
make_prior(rnorm, 1.09, 0.04),
make_prior(1)),
target.Yr = 2019,
num.haplotypes = 24,
output.Yrs = c(2021, 2030),
abs.abundance = Abs.Abundance.2010,
abs.abundance.key = TRUE,
rel.abundance = Rel.Abundance.SWRight,
rel.abundance.key = TRUE, # Indices of abundance
count.data = Count.Data, # Not used
count.data.key = FALSE, # Don't use count data
growth.rate.obs = c(0.074, 0.033, FALSE), # Do not include growth rate
growth.rate.Yrs = c(1995, 1996, 1997, 1998), # Not used
catch.data = catch_list,
control = sir_control(threshold = 1e-5, progress_bar = TRUE),
realized_prior = ifelse(i == 1, "FALSE", "TRUE"))
}
resample_summary_reference <- summary_sir(sensitivity_14[[1]]$resamples_output, object = "Resample_Summary", file_name = file_name)
trajectory_summary_reference <- summary_sir(sensitivity_14[[1]]$resamples_trajectories, object = "Trajectory_Summary", file_name = file_name)
save(sensitivity_14, file = paste0(file_name, ".Rdata"))
load(file = paste0(file_name, ".Rdata"))
plot_trajectory(sensitivity_14[[1]],  file_name = file_name)
plot_trajectory(sensitivity_14[[2]],  file_name = paste0(file_name, "prior"))
plot_density(SIR = list(sensitivity_14[[1]]),  file_name = file_name,   priors = list(sensitivity_14[[2]]), inc_reference = FALSE)
plot_ioa(sensitivity_14[[1]],  file_name = file_name, ioa_names = NULL )
summary_table(sensitivity_14[[1]],  file_name = file_name)
i = 1
sensitivity_14[[i]] <-  StateSpaceSIR(
file_name = NULL,
n_resamples = 100,
priors = make_prior_list(r_max =  make_prior(runif, 0, 0.11),
N_obs = make_prior(runif, 100, 10000),
var_N = make_prior(runif, 6.506055e-05, 6.506055e-05 * 10),
z = make_prior(use = FALSE),
q_IA1 = make_prior(rlnorm, log(0.5), 0.2),
q_IA2 = make_prior(rnorm, 0, 0.1),
Pmsy = make_prior(runif, 0.5, 0.8)),
catch_multipliers = make_multiplier_list(
make_prior(1),
make_prior(rnorm, 1.60 , 0.04),
make_prior(rnorm, 1.09, 0.04),
make_prior(1)),
target.Yr = 2019,
num.haplotypes = 24,
output.Yrs = c(2021, 2030),
abs.abundance = Abs.Abundance.2010,
abs.abundance.key = TRUE,
rel.abundance = Rel.Abundance.SWRight,
rel.abundance.key = TRUE, # Indices of abundance
count.data = Count.Data, # Not used
count.data.key = FALSE, # Don't use count data
growth.rate.obs = c(0.074, 0.033, FALSE), # Do not include growth rate
growth.rate.Yrs = c(1995, 1996, 1997, 1998), # Not used
catch.data = catch_list,
control = sir_control(threshold = 1e-5, progress_bar = TRUE),
realized_prior = ifelse(i == 1, "FALSE", "TRUE"))
sensitivity_14[[i]] <-  StateSpaceSIR(
file_name = NULL,
n_resamples = 100,
priors = make_prior_list(r_max =  make_prior(runif, 0, 0.11),
N_obs = make_prior(runif, 100, 10000),
var_N = make_prior(runif, 6.506055e-05, 6.506055e-05 * 10),
z = make_prior(use = FALSE),
q_IA1 = make_prior(rlnorm, log(0.5), 0.2),
q_IA2 = make_prior(rnorm, 0, 0.1),
Pmsy = make_prior(runif, 0.5, 0.8)),
catch_multipliers = make_multiplier_list(
make_prior(1),
make_prior(rnorm, 1.60 , 0.04),
make_prior(rnorm, 1.09, 0.04),
make_prior(1)),
target.Yr = 2019,
num.haplotypes = 24,
output.Yrs = c(2021, 2030),
abs.abundance = Abs.Abundance.2010,
abs.abundance.key = TRUE,
rel.abundance = Rel.Abundance.SWRight,
rel.abundance.key = TRUE, # Indices of abundance
count.data = Count.Data, # Not used
count.data.key = FALSE, # Don't use count data
growth.rate.obs = c(0.074, 0.033, FALSE), # Do not include growth rate
growth.rate.Yrs = c(1995, 1996, 1997, 1998), # Not used
catch.data = catch_list,
control = sir_control(threshold = 1e-10, progress_bar = TRUE),
realized_prior = ifelse(i == 1, "FALSE", "TRUE"))
sensitivity_14[[i]] <-  StateSpaceSIR(
file_name = NULL,
n_resamples = 100,
priors = make_prior_list(r_max =  make_prior(runif, 0, 0.11),
N_obs = make_prior(runif, 100, 10000),
var_N = make_prior(runif, 6.506055e-05, 6.506055e-05 * 10),
z = make_prior(use = FALSE),
q_IA1 = make_prior(rlnorm, log(0.5), 0.2),
q_IA2 = make_prior(rnorm, 0, 0.1),
Pmsy = make_prior(runif, 0.5, 0.8)),
catch_multipliers = make_multiplier_list(
make_prior(1),
make_prior(rnorm, 1.60 , 0.04),
make_prior(rnorm, 1.09, 0.04),
make_prior(1)),
target.Yr = 2019,
num.haplotypes = 24,
output.Yrs = c(2021, 2030),
abs.abundance = Abs.Abundance.2010,
abs.abundance.key = TRUE,
rel.abundance = Rel.Abundance.SWRight,
rel.abundance.key = TRUE, # Indices of abundance
count.data = Count.Data, # Not used
count.data.key = FALSE, # Don't use count data
growth.rate.obs = c(0.074, 0.033, FALSE), # Do not include growth rate
growth.rate.Yrs = c(1995, 1996, 1997, 1998), # Not used
catch.data = catch_list,
control = sir_control(threshold = 1e-8, progress_bar = TRUE),
realized_prior = ifelse(i == 1, "FALSE", "TRUE"))
sensitivity_14[[i]] <-  StateSpaceSIR(
file_name = NULL,
n_resamples = 100,
priors = make_prior_list(r_max =  make_prior(runif, 0, 0.11),
N_obs = make_prior(runif, 100, 10000),
var_N = make_prior(runif, 6.506055e-05, 6.506055e-05 * 10),
z = make_prior(use = FALSE),
q_IA1 = make_prior(rlnorm, log(0.5), 0.2),
q_IA2 = make_prior(rnorm, 0, 0.1),
Pmsy = make_prior(runif, 0.5, 0.8)),
catch_multipliers = make_multiplier_list(
make_prior(1),
make_prior(rnorm, 1.60 , 0.04),
make_prior(rnorm, 1.09, 0.04),
make_prior(1)),
target.Yr = 2019,
num.haplotypes = 24,
output.Yrs = c(2021, 2030),
abs.abundance = Abs.Abundance.2010,
abs.abundance.key = TRUE,
rel.abundance = Rel.Abundance.SWRight,
rel.abundance.key = TRUE, # Indices of abundance
count.data = Count.Data, # Not used
count.data.key = FALSE, # Don't use count data
growth.rate.obs = c(0.074, 0.033, FALSE), # Do not include growth rate
growth.rate.Yrs = c(1995, 1996, 1997, 1998), # Not used
catch.data = catch_list,
control = sir_control(threshold = 1e-6, progress_bar = TRUE),
realized_prior = ifelse(i == 1, "FALSE", "TRUE"))
resample_summary_reference <- summary_sir(sensitivity_14[[1]]$resamples_output, object = "Resample_Summary", file_name = file_name)
trajectory_summary_reference <- summary_sir(sensitivity_14[[1]]$resamples_trajectories, object = "Trajectory_Summary", file_name = file_name)
resample_summary_reference
summary_table(sensitivity_14[[1]],  file_name = file_name)
################################################################################
# Sensitivity 14 - power equation q
################################################################################
file_name <- "Model runs/sensitivity_14/sensitivity_14"
sensitivity_14 <- list()
for(i in 1:2){
sensitivity_14[[i]] <-  StateSpaceSIR(
file_name = NULL,
n_resamples = 100,
priors = make_prior_list(r_max =  make_prior(runif, 0, 0.11),
N_obs = make_prior(runif, 100, 10000),
var_N = make_prior(runif, 6.506055e-05, 6.506055e-05 * 10),
z = make_prior(use = FALSE),
q_IA1 = make_prior(rlnorm, log(0.5), 0.2),
q_IA2 = make_prior(rnorm, 0, 0.1),
Pmsy = make_prior(runif, 0.5, 0.8)),
catch_multipliers = make_multiplier_list(
make_prior(1),
make_prior(rnorm, 1.60 , 0.04),
make_prior(rnorm, 1.09, 0.04),
make_prior(1)),
target.Yr = 2019,
num.haplotypes = 24,
output.Yrs = c(2021, 2030),
abs.abundance = Abs.Abundance.2010,
abs.abundance.key = TRUE,
rel.abundance = Rel.Abundance.SWRight,
rel.abundance.key = TRUE, # Indices of abundance
count.data = Count.Data, # Not used
count.data.key = FALSE, # Don't use count data
growth.rate.obs = c(0.074, 0.033, FALSE), # Do not include growth rate
growth.rate.Yrs = c(1995, 1996, 1997, 1998), # Not used
catch.data = catch_list,
control = sir_control(threshold = 1e-5, progress_bar = TRUE),
realized_prior = ifelse(i == 1, "FALSE", "TRUE"))
}
resample_summary_reference <- summary_sir(sensitivity_14[[1]]$resamples_output, object = "Resample_Summary", file_name = file_name)
trajectory_summary_reference <- summary_sir(sensitivity_14[[1]]$resamples_trajectories, object = "Trajectory_Summary", file_name = file_name)
save(sensitivity_14, file = paste0(file_name, ".Rdata"))
load(file = paste0(file_name, ".Rdata"))
plot_trajectory(sensitivity_14[[1]],  file_name = file_name)
plot_trajectory(sensitivity_14[[2]],  file_name = paste0(file_name, "prior"))
plot_density(SIR = list(sensitivity_14[[1]]),  file_name = file_name,   priors = list(sensitivity_14[[2]]), inc_reference = FALSE)
plot_ioa(sensitivity_14[[1]],  file_name = file_name, ioa_names = NULL )
summary_table(sensitivity_14[[1]],  file_name = file_name)
################################################################################
# Sensitivity 14 - power equation q
################################################################################
file_name <- "Model runs/sensitivity_14/sensitivity_14"
sensitivity_14 <- list()
for(i in 1:2){
sensitivity_14[[i]] <-  StateSpaceSIR(
file_name = NULL,
n_resamples = 20000,
priors = make_prior_list(r_max =  make_prior(runif, 0, 0.11),
N_obs = make_prior(runif, 100, 10000),
var_N = make_prior(runif, 6.506055e-05, 6.506055e-05 * 10),
z = make_prior(use = FALSE),
q_IA1 = make_prior(rlnorm, log(0.5), 0.2),
q_IA2 = make_prior(rnorm, 0, 0.1),
Pmsy = make_prior(runif, 0.5, 0.8)),
catch_multipliers = make_multiplier_list(
make_prior(1),
make_prior(rnorm, 1.60 , 0.04),
make_prior(rnorm, 1.09, 0.04),
make_prior(1)),
target.Yr = 2019,
num.haplotypes = 24,
output.Yrs = c(2021, 2030),
abs.abundance = Abs.Abundance.2010,
abs.abundance.key = TRUE,
rel.abundance = Rel.Abundance.SWRight,
rel.abundance.key = TRUE, # Indices of abundance
count.data = Count.Data, # Not used
count.data.key = FALSE, # Don't use count data
growth.rate.obs = c(0.074, 0.033, FALSE), # Do not include growth rate
growth.rate.Yrs = c(1995, 1996, 1997, 1998), # Not used
catch.data = catch_list,
control = sir_control(threshold = 1e-5, progress_bar = TRUE),
realized_prior = ifelse(i == 1, "FALSE", "TRUE"))
}
resample_summary_reference <- summary_sir(sensitivity_14[[1]]$resamples_output, object = "Resample_Summary", file_name = file_name)
trajectory_summary_reference <- summary_sir(sensitivity_14[[1]]$resamples_trajectories, object = "Trajectory_Summary", file_name = file_name)
save(sensitivity_14, file = paste0(file_name, ".Rdata"))
load(file = paste0(file_name, ".Rdata"))
plot_trajectory(sensitivity_14[[1]],  file_name = file_name)
plot_trajectory(sensitivity_14[[2]],  file_name = paste0(file_name, "prior"))
plot_density(SIR = list(sensitivity_14[[1]]),  file_name = file_name,   priors = list(sensitivity_14[[2]]), inc_reference = FALSE)
plot_ioa(sensitivity_14[[1]],  file_name = file_name, ioa_names = NULL )
summary_table(sensitivity_14[[1]],  file_name = file_name)
load("~/GitHub/RightwhaleRuns/Model runs/Sensitivity_4/Sensitivity_4.Rdata")
################################################################################
# Sensitivity_4
################################################################################
file_name <- "Model runs/Sensitivity_4/Sensitivity_4"
summary_table(sensitivity_4[[1]],  file_name = file_name)
load("~/GitHub/RightwhaleRuns/Model runs/Sensitivity_14/sensitivity_14.Rdata")
sensitivity_14
