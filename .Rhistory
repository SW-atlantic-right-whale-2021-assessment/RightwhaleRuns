P50 = make_prior(rbeta, 1, 10)), # curve(dbeta(x, 1, 10), from = 0 ,to = 1)
catch_multipliers = make_multiplier_list(
make_prior(1),
make_prior(rnorm, 1.60 , 0.04),
make_prior(rnorm, 1.09, 0.04),
make_prior(1)),
target.Yr = 2019,
num.haplotypes = 24,
output.Yrs = c(2021, 2030),
abs.abundance = Abs.Abundance.2010,
abs.abundance.key = TRUE,
rel.abundance = Rel.Abundance.SWRight,
rel.abundance.key = TRUE, # Indices of abundance
count.data = Count.Data, # Not used
count.data.key = FALSE, # Don't use count data
growth.rate.obs = c(0.074, 0.033, FALSE), # Do not include growth rate
growth.rate.Yrs = c(1995, 1996, 1997, 1998), # Not used
catch.data = catch_list,
control = sir_control(threshold = 1e-5, progress_bar = TRUE),
realized_prior = ifelse(i == 1, FALSE, TRUE))
}
resample_summary_reference <- summary_sir(sir_depensation5[[1]]$resamples_output, object = "Resample_Summary", file_name = file_name)
trajectory_summary_reference <- summary_sir(sir_depensation5[[1]]$resamples_trajectories, object = "Trajectory_Summary", file_name = file_name)
save(sir_depensation5, file = paste0(file_name, ".Rdata"))
load(file = paste0(file_name, ".Rdata"))
plot_trajectory(sir_depensation5[[1]],  file_name = file_name)
plot_trajectory(sir_depensation5[[2]],  file_name = paste0(file_name, "prior"))
plot_density(SIR = list(sir_depensation5[[1]]),  file_name = file_name,   priors = list(sir_depensation5[[2]]), inc_reference = FALSE)
plot_ioa(sir_depensation5[[1]],  file_name = file_name, ioa_names = NULL )
summary_table(sir_depensation5[[1]],  file_name = file_name)
################################################################################
# Depensation model 6 - Logistic w/ beta prior
################################################################################
file_name <- "Model runs/Depensation_6/Depensation_6"
sir_depensation6 <- list()
for(i in 1:2){
sir_depensation6[[i]] <-  StateSpaceSIR(
file_name = NULL,
allee_model = 2,
n_resamples = 20000,
priors = make_prior_list(r_max =  make_prior(runif, 0, 0.11),
N_obs = make_prior(runif, 100, 10000),
var_N = make_prior(runif, 6.506055e-05, 6.506055e-05 * 10),
z = make_prior(use = FALSE),
Pmsy = make_prior(runif, 0.5, 0.8),
P50 = make_prior(rbeta, 1, 10)), # curve(dbeta(x, 1, 10), from = 0 ,to = 1)
catch_multipliers = make_multiplier_list(
make_prior(1),
make_prior(rnorm, 1.60 , 0.04),
make_prior(rnorm, 1.09, 0.04),
make_prior(1)),
target.Yr = 2019,
num.haplotypes = 24,
output.Yrs = c(2021, 2030),
abs.abundance = Abs.Abundance.2010,
abs.abundance.key = TRUE,
rel.abundance = Rel.Abundance.SWRight,
rel.abundance.key = TRUE, # Indices of abundance
count.data = Count.Data, # Not used
count.data.key = FALSE, # Don't use count data
growth.rate.obs = c(0.074, 0.033, FALSE), # Do not include growth rate
growth.rate.Yrs = c(1995, 1996, 1997, 1998), # Not used
catch.data = catch_list,
control = sir_control(threshold = 1e-5, progress_bar = TRUE),
realized_prior = ifelse(i == 1, FALSE, TRUE))
}
resample_summary_reference <- summary_sir(sir_depensation6[[1]]$resamples_output, object = "Resample_Summary", file_name = file_name)
trajectory_summary_reference <- summary_sir(sir_depensation6[[1]]$resamples_trajectories, object = "Trajectory_Summary", file_name = file_name)
save(sir_depensation6, file = paste0(file_name, ".Rdata"))
load(file = paste0(file_name, ".Rdata"))
plot_trajectory(sir_depensation6[[1]],  file_name = file_name)
plot_trajectory(sir_depensation6[[2]],  file_name = paste0(file_name, "prior"))
plot_density(SIR = list(sir_depensation6[[1]]),  file_name = file_name,   priors = list(sir_depensation6[[2]]), inc_reference = FALSE)
plot_ioa(sir_depensation6[[1]],  file_name = file_name, ioa_names = NULL )
summary_table(sir_depensation6[[1]],  file_name = file_name)
#' OUTPUT FUNCTION
#'
#' Function that provides a plot of the estimated posterior densities of parameters from  SIR  model.
#'
#' @param SIR A fit SIR model or list of SIR models. Plots in the order provided.
#' @param file_name name of a file to identified the files exported by the
#'   function. If NULL, does not save.
#' @param lower Vector of lower bounds for x-axis
#' @param upper Vector of upper bounds for x-axis
#' @param probs Lower and upper quantiles to use for plot limits if lower and upper are not specified.
#' @param posteriors_lwd Line width for models
#' @param posteriors_lty Line type for models
#' @param posteriors_col Line color for models
#'
#' @return Returns and saves a figure with the posterior densities of parameters.
#' @export
plot_density_depensation <- function(SIR, posteriors_lwd = rep(3, length(SIR)), posteriors_lty = rep(1, length(SIR)), posteriors_col = rep(1, length(SIR)),  file_name = NULL, lower = NULL, upper = NULL, probs = c(0.025, 0.975) ){
# Make into list
if(class(SIR) == "SIR"){
SIR <- list(SIR)
}
for(i in 1:length(SIR)){
if(is.null(SIR[[i]]$inputs$allee_model)){
SIR[[i]]$resamples_output$P50 <- 0
SIR[[i]]$inputs$allee_model <- 0
}
if(SIR[[i]]$inputs$allee_model == 0){
SIR[[i]]$resamples_output$P50 <- 0
}
}
# Vars of interest
num.IA <- sort(unique(c( sapply(SIR, function(x) x$inputs$rel.abundance$Index))))
years <- sort(unique(c(
sapply(SIR, function(x) x$inputs$target.Yr),
sapply(SIR, function(x) x$inputs$output.Years))))
vars <- c("r_max", "K", "Pmsy", "P50", "Nmin", paste0("N", years), "Max_Dep", paste0("status", years), paste0("q_IA1", num.IA), paste0("q_IA2", num.IA), "var_N", "add_VAR_IA", paste0("catch_multiplier_",2:3), "catch_parameter")
vars_latex <- c("$r_{max}$", "$K$", "$P_{MSY}$", "$P_D$", "$N_{min}$", paste0("$N_{", years, "}$"), "$P_{min}$", paste0("$P_{", years,"}$"), paste0("$q_{flt", num.IA, "}$"), paste0("$\beta_{q_{flt", num.IA,"}}$"), "$sigma$", "$tau_q$", paste0("$SLR_",1:2,"$"), "$pi$")
# Only select vars that have multiple unique parameters
x <- SIR[[1]]$resamples_output[,vars]
unique_vars <- sapply(x, function(x) length(unique(x)))
for(i in 1:length(SIR)){
SIR[[i]]$resamples_output$var_N <- sqrt(SIR[[i]]$resamples_output$var_N)
}
vars <- vars[which(unique_vars > 1)]
vars_latex <- vars_latex[which(unique_vars > 1)]
# -- Get posterior of q
# Get posterior of q
q_posteriors <- list() # Each layer is an index
for(k in 1:length(SIR)){
q_posteriors[[k]] <- list()
# -- Determining the number of Indices of Abundance available
rel.abundance <- SIR[[k]]$inputs$rel.abundance
indices <- unique(rel.abundance$Index)
IA.yrs <- rel.abundance$Year
N_hat <- SIR[[k]]$resamples_trajectories[, paste0("N_", IA.yrs)] # Estimates of N within IOA years
# -- Q2 for exponent
q1_cols <- grep("q_IA1", colnames(SIR[[k]]$resamples_output)) # Columns of resample Q estimates
q1_est <- SIR[[k]]$resamples_output[, q1_cols]
q1_est <- as.matrix(q1_est, ncol = length(q1_cols))
q2_cols <- grep("q_IA2", colnames(SIR[[k]]$resamples_output)) # Columns of resample Q estimates
q2_est <- SIR[[k]]$resamples_output[, q2_cols]
q2_est <- as.matrix(q2_est, ncol = length(q2_cols))
# -- Make var-covar into wide and tall with cov = 0 for different indices
rel.var.covar.tall <-  subset(rel.abundance, select = -c(Index,Year,IA.obs,IndYear))
rel.var.covar.wide <- rel.var.covar.tall[which(rel.abundance$Index == 1),]
rel.var.covar.wide <- rel.var.covar.wide[1:nrow(rel.var.covar.wide),1:nrow(rel.var.covar.wide)]
rel.hess.wide <- solve(rel.var.covar.wide[1:nrow(rel.var.covar.wide), 1: nrow(rel.var.covar.wide)])
if(num.IA>1){
for(i in 2:length(unique(rel.abundance$Index))){
var.cov.tmp <- as.matrix(rel.var.covar.tall[which(rel.abundance$Index == i),])
var.cov.tmp <- var.cov.tmp[1:nrow(var.cov.tmp), 1:nrow(var.cov.tmp)]
colnames(var.cov.tmp) <- NULL
rownames(var.cov.tmp) <- NULL
rel.var.covar.wide <- Matrix::bdiag(as.matrix(rel.var.covar.wide), var.cov.tmp)
rel.hess.tall <- plyr::rbind.fill.matrix(rel.hess.tall, solve(var.cov.tmp))
}
}
rel.var.covar.wide <- as.matrix(rel.var.covar.wide)
# -- Loop through posterior draws
for(j in 1:nrow(SIR[[k]]$resamples_trajectories)){
# -- Sample q
q_posteriors_tmp <- exp(MASS::mvrnorm(
n = 5,
mu = as.numeric(log(rel.abundance$IA.obs/N_hat[j,] ^ (q2_est[j,rel.abundance$Index] + 1)) - diag(rel.var.covar.wide)/2),
Sigma = rel.var.covar.wide))
# q_est <- exp(sum(rel.hess.wide %*% as.numeric(log(rel.abundance$IA.obs/N_hat[j,] ^ (q2_est[j,rel.abundance$Index] + 1))))/(sum(rel.hess.wide))) # q_i
# -- Assign to list
for(i in indices){
if(j == 1){
q_posteriors[[k]][[i]] <- c(q_posteriors_tmp[,which(rel.abundance$Index == i)])
} else {
q_posteriors[[k]][[i]] <- c(q_posteriors[[k]][[i]], c(q_posteriors_tmp[,which(rel.abundance$Index == i)]))
}
}
}
}
# Plot
for(j in 1:(1 + as.numeric(!is.null(file_name)) * 2)){
# PNG
if(j == 2){
filename <- paste0(file_name, "_posterior_density", ".png")
png( file = filename , width=10, height = 110 / 25.4, family = "serif", units = "in", res = 300)
}
# PDF
if(j == 3){
filename <- paste0(file_name, "_posterior_density", ".pdf")
pdf( file = filename , width=10, height = 110 / 25.4, family = "serif")
}
par(mfrow = c(ceiling(length(vars)/5), 7))
par( mar=c(3, 0.05 , 0.5 , 0.55) , oma=c(0 , 0 , 0 , 0), tcl = -0.35, mgp = c(1.75, 0.5, 0))
plot.new()
# Loop through vars
for(i in 1:length(vars)){
# Extract posterio densities
posterior_dens <- list()
for(k in 1:length(SIR)){
posterior_dens[[k]] <- density(as.numeric(as.character(SIR[[k]]$resamples_output[,vars[i]])))
if(vars[i] %in% paste0("q_IA1", num.IA)){
posterior_dens[[k]] <- density(q_posteriors[[k]][[as.numeric(unlist(strsplit(paste0("q_IA1", num.IA), "q_IA1"))[2])]])
}
}
# Get x range
if(is.null(lower[i])){
xlow <- quantile(sapply(posterior_dens, "[", "x")$x, probs= probs[1])
} else if(is.na(lower[i])){
xlow <- quantile(sapply(posterior_dens, "[", "x")$x, probs= probs[1])
} else{
xlow <- lower[i]
}
if(is.null(upper[i])){
xup <- quantile(sapply(posterior_dens, "[", "x")$x, probs= probs[2])
}
else if(is.na(upper[i])){
xup <- quantile(sapply(posterior_dens, "[", "x")$x, probs= probs[2])
} else{
xup <- upper[i]
}
# Plot them
plot(NA,
xlim = c(xlow, xup),
ylim = c(0, range(sapply(posterior_dens, "[", "y"))[2]),
ylab = NA, xlab = latex2exp::TeX(vars_latex[i]), yaxt = "n")
for(k in 1:length(posterior_dens)){
if(i == 4 & SIR[[k]]$inputs$allee_model !=0){ # Dont plot Pd parameter for depensation models
lines(posterior_dens[[k]], lwd = posteriors_lwd[k], lty = posteriors_lty[k], col = posteriors_col[k])
}
if(i != 4){
lines(posterior_dens[[k]], lwd = posteriors_lwd[k], lty = posteriors_lty[k], col = posteriors_col[k])
}
}
if(i %% 5 == 0)  {
plot.new()
plot.new()
}
if((i-1) %% 5 == 0 ) {
mtext(side = 2, "Density", line = 1, cex= 0.75)
}
}
if(j > 1){ dev.off()}
}
}
library(StateSpaceSIR)
library(EnvStats)
################################################################################
# Base model
################################################################################
file_name <- "Model runs/Base2/Base2"
load(file = paste0(file_name, ".Rdata"))
################################################################################
# Depensation 1 - Hilborn et al 2014 depensation
################################################################################
file_name <- "Model runs/Depensation_1/Depensation_1"
load(file = paste0(file_name, ".Rdata"))
plot_trajectory(sir_depensation1[[1]],  file_name = file_name)
plot_trajectory(sir_depensation1[[2]],  file_name = paste0(file_name, "prior"))
plot_density_depensation(SIR = list(sir_depensation1[[1]], sir_depensation1[[2]], sir_base[[1]], sir_depensation1[[1]]),  file_name = file_name,  posteriors_lwd = c(3,1,3,3), posteriors_lty = c(1,1,2,1), posteriors_col = c(1,1,"grey45",1))
dev.off()
# plot_ioa(sir_depensation1[[1]],  file_name = file_name, ioa_names = NULL )
# # summary_table(sir_depensation1[[1]],  file_name = file_name)
################################################################################
# Depensation 2 - Logistic depensation
################################################################################
file_name <- "Model runs/Depensation_2/Depensation_2"
load(file = paste0(file_name, ".Rdata"))
plot_trajectory(sir_depensation2[[1]],  file_name = file_name)
plot_trajectory(sir_depensation2[[2]],  file_name = paste0(file_name, "prior"))
plot_density_depensation(SIR = list(sir_depensation2[[1]], sir_depensation2[[2]], sir_base[[1]], sir_depensation2[[1]]),  file_name = file_name,  posteriors_lwd = c(3,1,3,3), posteriors_lty = c(1,1,2,1), posteriors_col = c(1,1,"grey45",1))
dev.off()
# plot_ioa(sir_depensation2[[1]],  file_name = file_name, ioa_names = NULL )
# summary_table(sir_depensation2[[1]],  file_name = file_name)
################################################################################
# Depensation 3 - Lin and Li 2002 depensation
################################################################################
file_name <- "Model runs/Depensation_3/Depensation_3"
load(file = paste0(file_name, ".Rdata"))
plot_trajectory(sir_depensation3[[1]],  file_name = file_name)
plot_trajectory(sir_depensation3[[2]],  file_name = paste0(file_name, "prior"))
plot_density_depensation(SIR = list(sir_depensation3[[1]], sir_depensation3[[2]], sir_base[[1]], sir_depensation3[[1]]),  file_name = file_name,  posteriors_lwd = c(3,1,3,3), posteriors_lty = c(1,1,2,1), posteriors_col = c(1,1,"grey45",1))
dev.off()
# plot_ioa(sir_depensation3[[1]],  file_name = file_name, ioa_names = NULL )
# summary_table(sir_depensation3[[1]],  file_name = file_name)
################################################################################
# Depensation 4 - Haider et al 2017 depensation
################################################################################
file_name <- "Model runs/Depensation_4/Depensation_4"
load(file = paste0(file_name, ".Rdata"))
plot_trajectory(sir_depensation4[[1]],  file_name = file_name)
plot_trajectory(sir_depensation4[[2]],  file_name = paste0(file_name, "prior"))
plot_density_depensation(SIR = list(sir_depensation4[[1]], sir_depensation4[[2]], sir_base[[1]], sir_depensation4[[1]]),  file_name = file_name,  posteriors_lwd = c(3,1,3,3), posteriors_lty = c(1,1,2,1), posteriors_col = c(1,1,"grey45",1))
dev.off()
# plot_ioa(sir_depensation4[[1]],  file_name = file_name, ioa_names = NULL )
# summary_table(sir_depensation4[[1]],  file_name = file_name)
################################################################################
# Depensation 5 - Hilborn et al 2014 depensation w/ beta prior
################################################################################
file_name <- "Model runs/Depensation_5/Depensation_5"
load(file = paste0(file_name, ".Rdata"))
plot_trajectory(sir_depensation5[[1]],  file_name = file_name)
plot_trajectory(sir_depensation5[[2]],  file_name = paste0(file_name, "prior"))
plot_density_depensation(SIR = list(sir_depensation5[[1]], sir_depensation5[[2]], sir_base[[1]], sir_depensation5[[1]]),  file_name = file_name,  posteriors_lwd = c(3,1,3,3), posteriors_lty = c(1,1,2,1), posteriors_col = c(1,1,"grey45",1))
dev.off()
# plot_ioa(sir_depensation5[[1]],  file_name = file_name, ioa_names = NULL )
# summary_table(sir_depensation5[[1]],  file_name = file_name)
################################################################################
# Depensation 6 - Logistic depensation w/ beta prior
################################################################################
file_name <- "Model runs/Depensation_6/Depensation_6"
load(file = paste0(file_name, ".Rdata"))
plot_trajectory(sir_depensation6[[1]],  file_name = file_name)
plot_trajectory(sir_depensation6[[2]],  file_name = paste0(file_name, "prior"))
plot_density_depensation(SIR = list(sir_depensation6[[1]], sir_depensation6[[2]], sir_base[[1]], sir_depensation6[[1]]),  file_name = file_name,  posteriors_lwd = c(3,1,3,3), posteriors_lty = c(1,1,2,1), posteriors_col = c(1,1,"grey45",1))
dev.off()
# plot_ioa(sir_depensation6[[1]],  file_name = file_name, ioa_names = NULL )
# summary_table(sir_depensation6[[1]],  file_name = file_name)
################################################################################
# Depensation 7 - Lin and Li 2002 depensation w/ beta prior
################################################################################
file_name <- "Model runs/Depensation_7/Depensation_7"
load(file = paste0(file_name, ".Rdata"))
plot_trajectory(sir_depensation7[[1]],  file_name = file_name)
plot_trajectory(sir_depensation7[[2]],  file_name = paste0(file_name, "prior"))
plot_density_depensation(SIR = list(sir_depensation7[[1]], sir_depensation7[[2]], sir_base[[1]], sir_depensation7[[1]]),  file_name = file_name,  posteriors_lwd = c(3,1,3,3), posteriors_lty = c(1,1,2,1), posteriors_col = c(1,1,"grey45",1))
dev.off()
# plot_ioa(sir_depensation7[[1]],  file_name = file_name, ioa_names = NULL )
# summary_table(sir_depensation7[[1]],  file_name = file_name)
################################################################################
# Depensation 8 - Haider et al 2017 depensation w/ beta prior
################################################################################
file_name <- "Model runs/Depensation_8/Depensation_8"
load(file = paste0(file_name, ".Rdata"))
plot_trajectory(sir_depensation8[[1]],  file_name = file_name)
plot_trajectory(sir_depensation8[[2]],  file_name = paste0(file_name, "prior"))
plot_density_depensation(SIR = list(sir_depensation8[[1]], sir_depensation8[[2]], sir_base[[1]], sir_depensation8[[1]]),  file_name = file_name,  posteriors_lwd = c(3,1,3,3), posteriors_lty = c(1,1,2,1), posteriors_col = c(1,1,"grey45",1))
dev.off()
# plot_ioa(sir_depensation8[[1]],  file_name = file_name, ioa_names = NULL )
# summary_table(sir_depensation8[[1]],  file_name = file_name)
library(StateSpaceSIR)
# Load all the models
file_names <- c("Base/Base",
"Sensitivity_1/Sensitivity_1",
"Sensitivity_2/Sensitivity_2",
"Sensitivity_3/Sensitivity_3",
"Sensitivity_4/Sensitivity_4",
"Sensitivity_5/Sensitivity_5",
"Sensitivity_6/Sensitivity_6",
"Sensitivity_7/Sensitivity_7",
"Sensitivity_8/Sensitivity_8",
"Sensitivity_9/Sensitivity_9",
"Sensitivity_10/Sensitivity_10",
"Sensitivity_11/Sensitivity_11",
"Sensitivity_12/Sensitivity_12",
"Sensitivity_13/Sensitivity_13",
"sensitivity_14/sensitivity_14",
"Model_average/Model_average")
for(i in 1:length(file_names)){
load(file = paste0("Model runs/",file_names[i], ".Rdata"))
}
# Plot and get parameter values from Model Average
file_name <-paste0("Model runs/",file_names[16])
trajectory_summary_reference <- summary_sir(model_average$resamples_trajectories, object = "Trajectory_Summary", file_name = file_name)
# Densities and trajectories with reference
sir_list <- list(sir_base,
sensitivity_1,
sensitivity_2,
sensitivity_3,
sensitivity_4,
sensitivity_5,
sensitivity_6,
sensitivity_7,
sensitivity_8,
sensitivity_9,
sensitivity_10,
sensitivity_11,
sensitivity_12,
sensitivity_13,
sensitivity_14)
#############################################################
#### Model averaging
#############################################################
# Get bayes factor for models with comparable likelihoods
bayes_f <- bayes_factor(SIR = list(sir_base[[1]],
sensitivity_1[[1]],
sensitivity_2[[1]],
sensitivity_3[[1]],
#sensitivity_4[[1]],
#sensitivity_5[[1]],
sensitivity_6[[1]],
sensitivity_7[[1]],
#sensitivity_8[[1]],
#sensitivity_9[[1]],
sensitivity_10[[1]],
sensitivity_11[[1]],
sensitivity_12[[1]],
sensitivity_13[[1]],
sensitivity_14[[1]]))
sensitivity_2
load("~/GitHub/RightwhaleRuns/Model runs/Sensitivity_2/Sensitivity_2.Rdata")
sensitivity_2
load("C:/Users/Grant Adams/Downloads/Sensitivity_2.Rdata")
sensitivity_2
load("C:/Users/Grant Adams/Downloads/Sensitivity_2 (1).Rdata")
sensitivity_2
#############################################################
#### Model averaging
#############################################################
# Get bayes factor for models with comparable likelihoods
bayes_f <- bayes_factor(SIR = list(sir_base[[1]],
sensitivity_1[[1]],
sensitivity_2[[1]],
sensitivity_3[[1]],
#sensitivity_4[[1]],
#sensitivity_5[[1]],
sensitivity_6[[1]],
sensitivity_7[[1]],
#sensitivity_8[[1]],
#sensitivity_9[[1]],
sensitivity_10[[1]],
sensitivity_11[[1]],
sensitivity_12[[1]],
sensitivity_13[[1]],
sensitivity_14[[1]]))
bayes_f
round(bayes_f,3)
library(StateSpaceSIR)
library(EnvStats)
################################################################################
# Read in data
################################################################################
# -- Catch
sw_right_data<-read.delim("Data/datosModeloBallenasmiles2020Miles1648to2019.csv", sep=";",header=FALSE)
names(sw_right_data)<- c("Year","CatchMin","CatchMax","Nt")
# Four periods of SLRs
# - Period 1: 1648-1770: SLR = 1
# - Period 2: 1771-1850: SLR ~ N(1.6, 0.04)
# - Period 3: 1851-1973: SLR ~ N(1.09, 0.04)
# - Period 4: 1974-Present: SLR = 1
catch_list <- list(sw_right_data[which(sw_right_data$Year < 1771),1:3],
sw_right_data[which(sw_right_data$Year >= 1771 & sw_right_data$Year <= 1850),1:3],
sw_right_data[which(sw_right_data$Year >= 1851 & sw_right_data$Year <= 1973),1:3],
sw_right_data[which(sw_right_data$Year > 1973),1:3])
# -- Absolute abundance
Abs.Abundance.2009 <- data.frame(Year = 2009, N.obs = 4029, CV.obs = NA) # FIXME: not used as of 4/24/21
Abs.Abundance.2010 <- data.frame(Year = 2010, N.obs = 4245, CV.obs = 245/4245) # 2010: 4245 (SE: 245, 95% CI 3,765, 4,725).
# -- Relative abundance
sw_right_rel_abundance<-read.csv("Data/Accumulated_n_whales_1999_to_2019.csv")
Rel.Abundance.SWRight <- data.frame(Index = rep(1, nrow(sw_right_rel_abundance)),
Year = sw_right_rel_abundance$Year,
IA.obs = sw_right_rel_abundance$A_xy_mu_sim) #Using 0.2 as a proxy
Rel.Abundance.SWRight = cbind(Rel.Abundance.SWRight, sw_right_rel_abundance[,paste0("X",1:17)])
for(i in 1:15){
dir.create(paste0("Model runs/Sensitivity_",i))
}
################################################################################
# Sensitivity 2 - smaller CV on lognromal prior on Rmax
################################################################################
file_name <- "Model runs/Sensitivity_2/Sensitivity_2"
sensitivity_2 <- list()
for(i in 1:2){
sensitivity_2[[i]] <-  StateSpaceSIR(
file_name = NULL,
n_resamples = 20000,
priors = make_prior_list(r_max =  make_prior(rlnorm, -2.67, 0.3),
N_obs = make_prior(runif, 100, 10000),
var_N = make_prior(runif, 6.506055e-05, 6.506055e-05 * 10),
z = make_prior(use = FALSE),
Pmsy = make_prior(runif, 0.5, 0.8)),
catch_multipliers = make_multiplier_list(
make_prior(1),
make_prior(rnorm, 1.60 , 0.04),
make_prior(rnorm, 1.09, 0.04),
make_prior(1)),
target.Yr = 2019,
num.haplotypes = 24,
output.Yrs = c(2021, 2030),
abs.abundance = Abs.Abundance.2010,
abs.abundance.key = TRUE,
rel.abundance = Rel.Abundance.SWRight,
rel.abundance.key = TRUE, # Indices of abundance
count.data = Count.Data, # Not used
count.data.key = FALSE, # Don't use count data
growth.rate.obs = c(0.074, 0.033, FALSE), # Do not include growth rate
growth.rate.Yrs = c(1995, 1996, 1997, 1998), # Not used
catch.data = catch_list,
control = sir_control(threshold = 1e-6, progress_bar = TRUE),
realized_prior = ifelse(i == 1, "FALSE", "TRUE"))
}
felse(i == 1, "FALSE", "TRUE")
load("G:/UW_SAFS_Work/GitHub/RightwhaleRuns/Model runs/Model_average/Model_average.Rdata")
library(StateSpaceSIR)
# Load all the models
file_names <- c("Base/Base",
"Sensitivity_1/Sensitivity_1",
"Sensitivity_2/Sensitivity_2",
"Sensitivity_3/Sensitivity_3",
"Sensitivity_4/Sensitivity_4",
"Sensitivity_5/Sensitivity_5",
"Sensitivity_6/Sensitivity_6",
"Sensitivity_7/Sensitivity_7",
"Sensitivity_8/Sensitivity_8",
"Sensitivity_9/Sensitivity_9",
"Sensitivity_10/Sensitivity_10",
"Sensitivity_11/Sensitivity_11",
"Sensitivity_12/Sensitivity_12",
"Sensitivity_13/Sensitivity_13",
"sensitivity_14/sensitivity_14",
"Model_average/Model_average")
# Plot and get parameter values from Model Average
file_name <-paste0("Model runs/",file_names[16])
trajectory_summary_reference <- summary_sir(model_average$resamples_trajectories, object = "Trajectory_Summary")
check <- trajectory_summary_reference$output_summary
View(check)
load("G:/UW_SAFS_Work/GitHub/RightwhaleRuns/Model runs/Model_average/Model_average.Rdata")
library(StateSpaceSIR)
library(StateSpaceSIR)
load("G:/UW_SAFS_Work/GitHub/RightwhaleRuns/Model runs/Model_average/Model_average.Rdata")
check <- summary_sir(model_average$resamples_trajectories, object = "Trajectory_Summary")$output_summary
View(check)
